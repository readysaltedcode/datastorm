<div id='code-container-1' class="row data-vis-code">
  <div class="col-lg-2 col-md-1 hidden-sm hidden-xs">
  </div> <!-- /col -->
  <div class="col-lg-8 col-md-10">
    <div data-height="5000" data-theme-id="8632" data-slug-hash="ImbJL" data-default-tab="js" data-user="readysaltedcode" class='codepen'>
      <pre><code>
        var xScale = d3.scale.linear().domain([-1.7, 1.7]).range([0, 800]);
        var yScale = d3.scale.linear().domain([-1.7, 1.7]).range([800, 0]);
        var radiusScale = d3.scale.linear().domain([5, 0]).range([3, 16]);
        var colorScale = d3.scale.linear().domain([0, 5]).range([&#39;brown&#39;, &#39;yellow&#39;]);

        var interpolationScale = d3.scale.linear().domain([0, 205000, 330000]).range([1, 1, 0.02]).clamp(true);
        var depthScale = d3.scale.linear().domain([0, 31000, 47000, 62000, 77000, 94000]).range([0, 1, 2, 3, 4, 5]).clamp(true);
        var alphaScale = d3.scale.linear().domain([0, 330000]).range([0.01, 0.2]).clamp(true);
        var linkAlphaScale = d3.scale.linear().domain([0, 330000]).range([0, 1]).clamp(true);

        var tree = {
          name: &#39;Spine&#39;,
          children: [
            {
              name: &#39;HipCenter&#39;,
              children: [
                {
                  name: &#39;HipLeft&#39;,
                  children: [
                    {
                      name: &#39;KneeLeft&#39;,
                      children: [
                        {
                          name: &#39;AnkleLeft&#39;,
                          children: [
                            {
                              name: &#39;FootLeft&#39;
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  name: &#39;HipRight&#39;,
                  children: [
                    {
                      name: &#39;KneeRight&#39;,
                      children: [
                        {
                          name: &#39;AnkleRight&#39;,
                          children: [
                            {
                              name: &#39;FootRight&#39;
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              name: &#39;ShoulderCenter&#39;,
              children: [
                {
                  name: &#39;Head&#39;
                },
                {
                  name: &#39;ShoulderLeft&#39;,
                  children: [
                    {
                      name: &#39;ElbowLeft&#39;,
                      children: [
                        {
                          name: &#39;WristLeft&#39;,
                          children: [
                            {
                              name: &#39;HandLeft&#39;
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  name: &#39;ShoulderRight&#39;,
                  children: [
                    {
                      name: &#39;ElbowRight&#39;,
                      children: [
                        {
                          name: &#39;WristRight&#39;,
                          children: [
                            {
                              name: &#39;HandRight&#39;
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        };

        function getJointsOfSkeleton(json, skeleton) {
          // Transform Kinect data into object
          var joints = {};
          if(json.Skeletons === undefined)
            return;
          if(skeleton &gt; json.Skeletons.length - 1)
            return;
          _.each(json.Skeletons[skeleton].Joints, function(joint) {
            joints[joint.JointType] = joint;
          });
          return joints;
        }

        function initialiseTree() {
          var treeLayout = d3.layout.tree()
            .size([500, 500]);

          var treeNodesArray = treeLayout(tree);
          var treeLinksArray = treeLayout.links(treeNodesArray);

          // keep tabs on original positions
          treeNodesArray = _.map(treeNodesArray, function(node) {
            node.startX = node.x,
            node.startY = node.y
            return node;
          });

          // convert to object
          treeNodes = {};
          _.each(treeNodesArray, function(node) {
            treeNodes[node.name] = node;
          })

          treeLinks = treeLinksArray;

          // console.log(treeLinksArray);
        }

        function drawTree() {
          ctx.save();

          ctx.strokeStyle = &#39;orange&#39;;
          ctx.lineWidth = 0.5;

          ctx.translate(300, 100);

          ctx.globalAlpha = linkAlphaScale(Date.now() - startTime);

          _.each(treeLinks, function(link) {
            var node0 = treeNodes[link.source.name];
            var node1 = treeNodes[link.target.name];

            if(node0.depth &gt; depth || node1.depth &gt; depth)
              return;

            // console.log(node0);
            drawLine(ctx, node0.x, node0.y, node1.x, node1.y);
          });

          ctx.globalAlpha = 0.9;

          _.each(treeNodes, function(node) {
            // console.log(node.depth, depth);
            if(node.depth &gt; depth)
              return;

            ctx.fillStyle = colorScale(node.depth);
            drawCircle(ctx, node.x, node.y, radiusScale(node.depth));
            // ctx.fillStyle = &#39;white&#39;;
            // ctx.textAlign = &#39;center&#39;;
            // ctx.fillText(node.name, node.x, node.y);
          });

          ctx.restore();
        }

        function updateNodes(joints) {
          // Interpolate between treeNodes and joints

          function linearInterpolate(p0, p1, u) {
            return (1 - u) * p0 + u * p1;
          }

          _.each(joints, function(joint) {
            var jointType = joint.JointType;
            var node = treeNodes[jointType];

            // console.log(joint, node);

            var u = interpolationScale(Date.now() - startTime);
            node.x = linearInterpolate(node.startX, xScale(joint.Position.X), u);
            node.y = linearInterpolate(node.startY, yScale(joint.Position.Y), u);
          });

          // console.log(treeNodes);
        }

        function clear() {
          // ctx.globalAlpha = 0.9;
          var alpha = alphaScale(Date.now() - startTime);
          ctx.fillStyle = &quot;rgba(0,0,0,&quot; + alpha + &quot;)&quot;;
          ctx.fillRect(0, 0, 1200, 800);
        }

        var canvas = document.getElementById(&#39;mycanvas&#39;);
        var ctx = canvas.getContext(&#39;2d&#39;);

        ctx.fillStyle = &quot;rgb(0,0,0)&quot;;
        ctx.fillRect(0, 0, 1200, 800);

        var treeNodes, treeLinks;
        var startTime = Date.now();
        var depth = 0;

        initialiseTree();
        drawTree();
      // You can choose one of these to visualise a different dance
      var DATASET_ALGORITHM = &#39;https://d10u56tzn9e9rq.cloudfront.net/algorithm_&#39;;

      var DATASET_BINARY = &#39;https://d10u56tzn9e9rq.cloudfront.net/binary_&#39;;

      var DATASET_WHOLEPIECE = &#39;https://d10u56tzn9e9rq.cloudfront.net/wholepiece_&#39;;

      var dataFetcher = new ChunkedDataFetcher(DATASET_ALGORITHM);
      dataFetcher.drawFunction = function(json) {
          depth = Math.floor(depthScale(Date.now() - startTime));
            // console.log(depth);

            var joints = getJointsOfSkeleton(json, 0);
            if(!joints)
              return;

            ctx.globalAlpha = 1;

            // console.log(joints)

            clear();

            updateNodes(joints);
            drawTree();
      }
      </code></pre>
    </div>
    <script async src="//codepen.io/assets/embed/ei.js"></script>

    <p class="codepen-footer">You can edit this data visualisation and watch the changes in real-time <a href='http://codepen.io/readysaltedcode/pen/ImbJL/'>here</a> on <a href='http://codepen.io'>CodePen</a>.</p>
  </div> <!-- /col -->
  <div class="col-lg-2 col-md-1 hidden-sm hidden-xs">
  </div> <!-- /col -->
</div> <!-- /row -->
